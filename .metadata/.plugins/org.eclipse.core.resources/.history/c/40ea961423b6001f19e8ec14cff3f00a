package br.com.treinamento.pedidos.controller;

import java.time.LocalDateTime;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.http.ResponseEntity;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import br.com.treinamento.pedidos.dto.DadosCadastroProduto;
import br.com.treinamento.pedidos.dto.ProdutoListagem;
import br.com.treinamento.pedidos.dto.ProdutoRespostaPaginada;
import br.com.treinamento.pedidos.dto.ProdutoSemPaginacao;
import br.com.treinamento.pedidos.model.Produto;
import br.com.treinamento.pedidos.repository.ProdutoRepository;
import jakarta.validation.Valid;

@RestController
@CrossOrigin("*")
@RequestMapping("/produto")
public class ProdutoController{
	
	@Autowired
	private ProdutoRepository produtoRepository;
	
	@SuppressWarnings("rawtypes")
	@GetMapping
	public ResponseEntity listar(@PageableDefault(size = 20) Pageable paginacao, 
			@RequestParam(required = false) String nome, 
			@RequestParam(required = false) String descricao,
			@RequestParam(required = false) LocalDateTime dataUltimaAtualizacaoStart,
			@RequestParam(required = false) LocalDateTime dataUltimaAtualizacaoEnd) {
		var page = produtoRepository.findAllByFilters(nome, descricao, dataUltimaAtualizacaoStart, dataUltimaAtualizacaoEnd, paginacao)
				.map(ProdutoListagem::new);

		ProdutoRespostaPaginada<ProdutoListagem> response = new ProdutoRespostaPaginada<>(page);
		return ResponseEntity.ok(response);
	}
	
	@SuppressWarnings("rawtypes")
	@PostMapping
	@Transactional
	public ResponseEntity cadastrar(@RequestBody @Valid DadosCadastroProduto dados, UriComponentsBuilder uriBuilder) {

		var produto = new Produto(dados);
		produtoRepository.save(produto);

		var uri = uriBuilder.path("/franquia/{id}").buildAndExpand(produto.getId()).toUri();

		return ResponseEntity.created(uri).body(new ProdutoSemPaginacao(produto));
	}
}
